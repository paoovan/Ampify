
package controllers;

import constants.ResponseCode;
import data.Song;
import data.User;
import java.awt.HeadlessException;
import java.awt.List;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import main.DownloadSong;
import main.MainClass;
import main.QueueEditor;
import request.AddGroupMemberRequest;
import request.AddSongToGroupPlaylist;
import request.AddSongToPlaylistRequest;
import request.CreateGroupPlaylistRequest;
import request.CreateGroupRequest;
import request.CreatePlaylistRequest;
import request.DownloadSongRequest;
import request.GetGroupMembersRequest;
import request.GetGroupPlaylistMusicRequest;
import request.GetGroupPlaylistRequest;
import request.GetGroupsRequest;
import request.GetPlaylistRequest;
import request.GetPlaylistSongsRequest;
import request.HistoryRequest;
import request.NewSongsRequest;
import request.RecommendationRequest;
import request.Response;
import request.SearchSongRequest;
import request.SharePlaylistRequest;
import request.TrendingRequest;
import request.UpdateRequest;


public class mainpage extends javax.swing.JFrame {

    public mainpage() {
        initComponents();
    }
QueueEditor queueEditor =new QueueEditor(this);
private boolean groupstarted =false;
String memberlists =new String();
DownloadSong downloadSongnamee;    

/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainpanel = new javax.swing.JPanel();
        headingbar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        homeb = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        mp3b = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        searchb = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        nowb = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        playlistb = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        groupsb = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        historyb = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        profileb = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        playdownlaodsb = new javax.swing.JPanel();
        playdownloadb = new javax.swing.JLabel();
        centerpanel = new javax.swing.JPanel();
        homecard = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        songlistmenu = new javax.swing.JList<>();
        addsongbutton = new javax.swing.JButton();
        newsongbutton = new javax.swing.JButton();
        trendingbutton = new javax.swing.JButton();
        recommendedbutton = new javax.swing.JButton();
        playallbutton = new javax.swing.JButton();
        mp3card = new javax.swing.JPanel();
        searchcard = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultmenu = new javax.swing.JList<>();
        addsongsearch = new javax.swing.JButton();
        filtergenre = new javax.swing.JComboBox<>();
        filterartist = new javax.swing.JComboBox<>();
        filterlanguage = new javax.swing.JComboBox<>();
        filtername = new javax.swing.JTextField();
        filterbutton = new javax.swing.JButton();
        filterback = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        downlaodsong = new javax.swing.JButton();
        nowcard = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        queuelist = new javax.swing.JList<>();
        jScrollPane11 = new javax.swing.JScrollPane();
        queueup = new javax.swing.JList<>();
        jScrollPane12 = new javax.swing.JScrollPane();
        queuedown = new javax.swing.JList<>();
        updatelistbutton = new javax.swing.JButton();
        deletesong = new javax.swing.JTextField();
        deletefromqueue = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        displayupdated = new javax.swing.JLabel();
        playlistcard = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        targetuserfield = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        searchsonglist = new javax.swing.JList<>();
        playlisttextfield = new javax.swing.JTextField();
        addsongtoplaylist = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        allplaylistlist = new javax.swing.JList<>();
        sharewithuser = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        addplaylisttoqueue = new javax.swing.JButton();
        jScrollPane13 = new javax.swing.JScrollPane();
        playlistallsongs = new javax.swing.JList<>();
        viewsongsofplaylist = new javax.swing.JButton();
        okbutton = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        searchsongtf = new javax.swing.JTextField();
        searchsongbt = new javax.swing.JButton();
        groupscard = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        groupnamedefiner = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        memberlistvisible = new javax.swing.JList<>();
        addmembername = new javax.swing.JTextField();
        addmembertogroupbutton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        grouplists = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        groupplaylistlists = new javax.swing.JList<>();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        alterb = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        createnewgroupplaylistbutton = new javax.swing.JButton();
        groupplaylistbutton = new javax.swing.JButton();
        okcreatebutton = new javax.swing.JButton();
        memberofgroupbutton = new javax.swing.JButton();
        altercard = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        altercardplaylistname = new javax.swing.JTextField();
        jScrollPane8 = new javax.swing.JScrollPane();
        altercardplaylistlist = new javax.swing.JList<>();
        altercardaddsongname = new javax.swing.JTextField();
        altercardaddsongbutton = new javax.swing.JButton();
        alterbackb = new javax.swing.JButton();
        jLabel42 = new javax.swing.JLabel();
        altercardgroupname = new javax.swing.JTextField();
        jScrollPane15 = new javax.swing.JScrollPane();
        searchcongstoadd = new javax.swing.JList<>();
        searchsongtoaddbutton = new javax.swing.JButton();
        historycard = new javax.swing.JPanel();
        recentbutton = new javax.swing.JButton();
        mostplayedbutton = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        historymenu = new javax.swing.JList<>();
        jTextField8 = new javax.swing.JTextField();
        jButton15 = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        historybutton = new javax.swing.JButton();
        profilecard = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        namefield = new javax.swing.JTextField();
        usernamefield = new javax.swing.JTextField();
        emailfield = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel32 = new javax.swing.JLabel();
        namechangerfield = new javax.swing.JTextField();
        emailchangerfield = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        updatebutton = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        logoutb = new javax.swing.JButton();
        creategroupplaylistcard = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        playlistnameforcreategroupplaylist = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        groupnameforcreatinggroupplaylist = new javax.swing.JTextField();
        refreshbuttonforcreatinggroupplaylist = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainpanel.setLayout(new java.awt.BorderLayout());

        headingbar.setBackground(new java.awt.Color(51, 51, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Ampify");

        javax.swing.GroupLayout headingbarLayout = new javax.swing.GroupLayout(headingbar);
        headingbar.setLayout(headingbarLayout);
        headingbarLayout.setHorizontalGroup(
            headingbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, headingbarLayout.createSequentialGroup()
                .addContainerGap(611, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(396, 396, 396))
        );
        headingbarLayout.setVerticalGroup(
            headingbarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headingbarLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        mainpanel.add(headingbar, java.awt.BorderLayout.PAGE_START);

        jPanel1.setBackground(new java.awt.Color(51, 51, 255));

        homeb.setBackground(new java.awt.Color(102, 255, 255));
        homeb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homebMouseClicked(evt);
            }
        });

        jLabel2.setText("HOME");

        javax.swing.GroupLayout homebLayout = new javax.swing.GroupLayout(homeb);
        homeb.setLayout(homebLayout);
        homebLayout.setHorizontalGroup(
            homebLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homebLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        homebLayout.setVerticalGroup(
            homebLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homebLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        mp3b.setBackground(new java.awt.Color(102, 255, 255));
        mp3b.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mp3bMouseClicked(evt);
            }
        });

        jLabel3.setText("MP3 PLAYER");

        javax.swing.GroupLayout mp3bLayout = new javax.swing.GroupLayout(mp3b);
        mp3b.setLayout(mp3bLayout);
        mp3bLayout.setHorizontalGroup(
            mp3bLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mp3bLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mp3bLayout.setVerticalGroup(
            mp3bLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mp3bLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        searchb.setBackground(new java.awt.Color(102, 255, 255));
        searchb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchbMouseClicked(evt);
            }
        });

        jLabel4.setText("SEARCH");

        javax.swing.GroupLayout searchbLayout = new javax.swing.GroupLayout(searchb);
        searchb.setLayout(searchbLayout);
        searchbLayout.setHorizontalGroup(
            searchbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchbLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        searchbLayout.setVerticalGroup(
            searchbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchbLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        nowb.setBackground(new java.awt.Color(102, 255, 255));
        nowb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nowbMouseClicked(evt);
            }
        });

        jLabel5.setText("NOW PLAYING");

        javax.swing.GroupLayout nowbLayout = new javax.swing.GroupLayout(nowb);
        nowb.setLayout(nowbLayout);
        nowbLayout.setHorizontalGroup(
            nowbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nowbLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel5)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        nowbLayout.setVerticalGroup(
            nowbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nowbLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        playlistb.setBackground(new java.awt.Color(102, 255, 255));
        playlistb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playlistbMouseClicked(evt);
            }
        });

        jLabel6.setText("PLAYLISTS");

        javax.swing.GroupLayout playlistbLayout = new javax.swing.GroupLayout(playlistb);
        playlistb.setLayout(playlistbLayout);
        playlistbLayout.setHorizontalGroup(
            playlistbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playlistbLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playlistbLayout.setVerticalGroup(
            playlistbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playlistbLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        groupsb.setBackground(new java.awt.Color(102, 255, 255));
        groupsb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                groupsbMouseClicked(evt);
            }
        });

        jLabel7.setText("GROUPS");

        javax.swing.GroupLayout groupsbLayout = new javax.swing.GroupLayout(groupsb);
        groupsb.setLayout(groupsbLayout);
        groupsbLayout.setHorizontalGroup(
            groupsbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, groupsbLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(48, 48, 48))
        );
        groupsbLayout.setVerticalGroup(
            groupsbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(groupsbLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        historyb.setBackground(new java.awt.Color(102, 255, 255));
        historyb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historybMouseClicked(evt);
            }
        });

        jLabel8.setText("HISTORY");

        javax.swing.GroupLayout historybLayout = new javax.swing.GroupLayout(historyb);
        historyb.setLayout(historybLayout);
        historybLayout.setHorizontalGroup(
            historybLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historybLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        historybLayout.setVerticalGroup(
            historybLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historybLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        profileb.setBackground(new java.awt.Color(102, 255, 255));
        profileb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                profilebMouseClicked(evt);
            }
        });

        jLabel9.setText("PROFILE");

        javax.swing.GroupLayout profilebLayout = new javax.swing.GroupLayout(profileb);
        profileb.setLayout(profilebLayout);
        profilebLayout.setHorizontalGroup(
            profilebLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilebLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel9)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        profilebLayout.setVerticalGroup(
            profilebLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilebLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        playdownlaodsb.setBackground(new java.awt.Color(102, 255, 255));
        playdownlaodsb.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playdownlaodsbMouseClicked(evt);
            }
        });

        playdownloadb.setText("PLAY DOWNLOAD ");

        javax.swing.GroupLayout playdownlaodsbLayout = new javax.swing.GroupLayout(playdownlaodsb);
        playdownlaodsb.setLayout(playdownlaodsbLayout);
        playdownlaodsbLayout.setHorizontalGroup(
            playdownlaodsbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playdownlaodsbLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playdownloadb)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playdownlaodsbLayout.setVerticalGroup(
            playdownlaodsbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playdownlaodsbLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playdownloadb)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(groupsb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(historyb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(homeb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mp3b, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(searchb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(nowb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(playlistb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(profileb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(playdownlaodsb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(homeb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(playdownlaodsb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mp3b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(searchb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(nowb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(playlistb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(groupsb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(historyb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(profileb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        mainpanel.add(jPanel1, java.awt.BorderLayout.LINE_START);

        centerpanel.setLayout(new java.awt.CardLayout());

        songlistmenu.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(51, 51, 255)));
        songlistmenu.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(songlistmenu);

        addsongbutton.setText("ADD SONG");
        addsongbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addsongbuttonActionPerformed(evt);
            }
        });

        newsongbutton.setText("NEW SONGS");
        newsongbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newsongbuttonActionPerformed(evt);
            }
        });

        trendingbutton.setText("TRENDING");
        trendingbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trendingbuttonActionPerformed(evt);
            }
        });

        recommendedbutton.setText("RECOMMENDED");
        recommendedbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recommendedbuttonActionPerformed(evt);
            }
        });

        playallbutton.setText("PLAY ALL");
        playallbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playallbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout homecardLayout = new javax.swing.GroupLayout(homecard);
        homecard.setLayout(homecardLayout);
        homecardLayout.setHorizontalGroup(
            homecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homecardLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(homecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(recommendedbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(newsongbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(trendingbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(245, 245, 245)
                .addGroup(homecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homecardLayout.createSequentialGroup()
                        .addComponent(playallbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addsongbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(184, 184, 184))
                    .addGroup(homecardLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(339, Short.MAX_VALUE))))
        );
        homecardLayout.setVerticalGroup(
            homecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homecardLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(homecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homecardLayout.createSequentialGroup()
                        .addComponent(newsongbutton)
                        .addGap(78, 78, 78)
                        .addComponent(trendingbutton)
                        .addGap(92, 92, 92)
                        .addComponent(recommendedbutton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(homecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addsongbutton)
                    .addComponent(playallbutton))
                .addContainerGap(157, Short.MAX_VALUE))
        );

        centerpanel.add(homecard, "card2");

        javax.swing.GroupLayout mp3cardLayout = new javax.swing.GroupLayout(mp3card);
        mp3card.setLayout(mp3cardLayout);
        mp3cardLayout.setHorizontalGroup(
            mp3cardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1065, Short.MAX_VALUE)
        );
        mp3cardLayout.setVerticalGroup(
            mp3cardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 634, Short.MAX_VALUE)
        );

        centerpanel.add(mp3card, "card3");

        jScrollPane2.setViewportView(resultmenu);

        addsongsearch.setText("ADD SONG");
        addsongsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addsongsearchActionPerformed(evt);
            }
        });

        filtergenre.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--SELECT--", "POP", "ROCK", "RAP", " " }));

        filterartist.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--SELECT--", "ED SHEERAN", "EMINEM", "BILLIE EILISH", "THE CHAINSMOKERS", " ", " ", " ", " " }));
        filterartist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterartistActionPerformed(evt);
            }
        });

        filterlanguage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--SELECT--", "ENGLISH", "HINDI", " " }));

        filterbutton.setText("FILTER");
        filterbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterbuttonActionPerformed(evt);
            }
        });

        filterback.setText("BACK");

        jLabel10.setText("ARTIST");

        jLabel11.setText("GENRE");

        jLabel12.setText("LANGUAGE");

        jLabel13.setText("NAME");

        jLabel14.setText("RESULTS");

        downlaodsong.setText("DOWNLOAD");
        downlaodsong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downlaodsongActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchcardLayout = new javax.swing.GroupLayout(searchcard);
        searchcard.setLayout(searchcardLayout);
        searchcardLayout.setHorizontalGroup(
            searchcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchcardLayout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(filterbutton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(downlaodsong)
                .addGap(18, 18, 18)
                .addComponent(addsongsearch)
                .addGap(285, 285, 285))
            .addGroup(searchcardLayout.createSequentialGroup()
                .addGroup(searchcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchcardLayout.createSequentialGroup()
                        .addGroup(searchcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(searchcardLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(searchcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel11))
                                .addGap(52, 52, 52)
                                .addGroup(searchcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(filtergenre, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(filterartist, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(filterlanguage, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(searchcardLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(filtername, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(99, 99, 99)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(searchcardLayout.createSequentialGroup()
                        .addGap(321, 321, 321)
                        .addComponent(filterback)))
                .addContainerGap(369, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchcardLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel14)
                .addGap(330, 330, 330))
        );
        searchcardLayout.setVerticalGroup(
            searchcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchcardLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel14)
                .addGap(26, 26, 26)
                .addGroup(searchcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(searchcardLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addGroup(searchcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterartist, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGap(29, 29, 29)
                        .addGroup(searchcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filtergenre, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(31, 31, 31)
                        .addGroup(searchcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterlanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(39, 39, 39)
                        .addGroup(searchcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filtername, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))))
                .addGap(60, 60, 60)
                .addGroup(searchcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addsongsearch)
                    .addComponent(filterbutton)
                    .addComponent(downlaodsong))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addComponent(filterback)
                .addGap(29, 29, 29))
        );

        centerpanel.add(searchcard, "card4");

        jScrollPane10.setViewportView(queuelist);

        jScrollPane11.setViewportView(queueup);

        jScrollPane12.setViewportView(queuedown);

        updatelistbutton.setText("UPDATE LIST");
        updatelistbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatelistbuttonActionPerformed(evt);
            }
        });

        deletesong.setEditable(false);

        deletefromqueue.setText("DELETE SONG");
        deletefromqueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletefromqueueActionPerformed(evt);
            }
        });

        jLabel34.setText("SONG LIST:");

        displayupdated.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, new java.awt.Color(153, 153, 153)));

        javax.swing.GroupLayout nowcardLayout = new javax.swing.GroupLayout(nowcard);
        nowcard.setLayout(nowcardLayout);
        nowcardLayout.setHorizontalGroup(
            nowcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nowcardLayout.createSequentialGroup()
                .addGroup(nowcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nowcardLayout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(200, 200, 200)
                        .addGroup(nowcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(updatelistbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deletesong)
                            .addComponent(deletefromqueue, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)))
                    .addGroup(nowcardLayout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(nowcardLayout.createSequentialGroup()
                        .addGap(227, 227, 227)
                        .addComponent(displayupdated, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(221, Short.MAX_VALUE))
        );
        nowcardLayout.setVerticalGroup(
            nowcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nowcardLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jLabel34)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nowcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nowcardLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(updatelistbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(deletesong, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(deletefromqueue, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(nowcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                        .addComponent(jScrollPane11)
                        .addComponent(jScrollPane12)))
                .addGap(62, 62, 62)
                .addComponent(displayupdated, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
        );

        centerpanel.add(nowcard, "card5");

        jLabel15.setText("CREATE/EDIT");

        jLabel16.setText("SHARE/PLAY");

        jLabel17.setText("PLAYLIST NAME:");

        jScrollPane3.setViewportView(searchsonglist);

        playlisttextfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlisttextfieldActionPerformed(evt);
            }
        });

        addsongtoplaylist.setText("ADD SONG");
        addsongtoplaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addsongtoplaylistActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(allplaylistlist);

        sharewithuser.setText("SHARE");
        sharewithuser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sharewithuserActionPerformed(evt);
            }
        });

        jLabel18.setText("USER NAME:");

        jButton6.setText("BACK");

        addplaylisttoqueue.setText("PLAY");
        addplaylisttoqueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addplaylisttoqueueActionPerformed(evt);
            }
        });

        jScrollPane13.setViewportView(playlistallsongs);

        viewsongsofplaylist.setText("VIEW SONGS");
        viewsongsofplaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewsongsofplaylistActionPerformed(evt);
            }
        });

        okbutton.setText("OK");
        okbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okbuttonActionPerformed(evt);
            }
        });

        jLabel37.setText("playlists:");

        jLabel38.setText("songs:");

        jLabel39.setText("SEARCH RESULTS:");

        jLabel43.setText("SEARCH SONG:");

        searchsongbt.setText("OK");
        searchsongbt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchsongbtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout playlistcardLayout = new javax.swing.GroupLayout(playlistcard);
        playlistcard.setLayout(playlistcardLayout);
        playlistcardLayout.setHorizontalGroup(
            playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playlistcardLayout.createSequentialGroup()
                .addGap(145, 981, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addGap(25, 25, 25))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playlistcardLayout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(186, 186, 186))
            .addGroup(playlistcardLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(addsongtoplaylist, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(playlistcardLayout.createSequentialGroup()
                        .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(playlisttextfield, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                            .addComponent(searchsongtf))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(okbutton, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(searchsongbt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(playlistcardLayout.createSequentialGroup()
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(targetuserfield, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playlistcardLayout.createSequentialGroup()
                            .addComponent(addplaylisttoqueue, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sharewithuser, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(playlistcardLayout.createSequentialGroup()
                            .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel37))
                            .addGap(18, 18, 18)
                            .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel38)
                                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(viewsongsofplaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playlistcardLayout.setVerticalGroup(
            playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playlistcardLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton6)
                .addGap(21, 21, 21)
                .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(targetuserfield, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(playlisttextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(okbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(playlistcardLayout.createSequentialGroup()
                        .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel37)
                            .addComponent(jLabel38))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane13)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)))
                    .addGroup(playlistcardLayout.createSequentialGroup()
                        .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchsongbt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(searchsongtf, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(viewsongsofplaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(playlistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addplaylisttoqueue, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addComponent(addsongtoplaylist, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                    .addComponent(sharewithuser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        centerpanel.add(playlistcard, "card6");

        jLabel19.setText("CREATE");

        jLabel20.setText("DISPLAY");

        jLabel21.setText("GROUP NAME:");

        jLabel22.setText("MEMBERS");

        jScrollPane5.setViewportView(memberlistvisible);

        addmembertogroupbutton.setText("ADD MEMBER");
        addmembertogroupbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addmembertogroupbuttonActionPerformed(evt);
            }
        });

        jScrollPane6.setViewportView(grouplists);

        jScrollPane7.setViewportView(groupplaylistlists);

        jLabel23.setText("GROUPS:");

        jLabel24.setText("PLAYLISTS:");

        alterb.setText("ALTER PLAYLIST");
        alterb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterbActionPerformed(evt);
            }
        });

        jButton7.setText("BACK");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        createnewgroupplaylistbutton.setText("CREATE NEW PLAYLIST");
        createnewgroupplaylistbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createnewgroupplaylistbuttonActionPerformed(evt);
            }
        });

        groupplaylistbutton.setText("PLAYLISTS");
        groupplaylistbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupplaylistbuttonActionPerformed(evt);
            }
        });

        okcreatebutton.setText("OK");
        okcreatebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okcreatebuttonActionPerformed(evt);
            }
        });

        memberofgroupbutton.setText("MEMBERS");
        memberofgroupbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberofgroupbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout groupscardLayout = new javax.swing.GroupLayout(groupscard);
        groupscard.setLayout(groupscardLayout);
        groupscardLayout.setHorizontalGroup(
            groupscardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(groupscardLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(groupscardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(groupscardLayout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addGap(27, 27, 27)
                        .addGroup(groupscardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel22)
                            .addGroup(groupscardLayout.createSequentialGroup()
                                .addComponent(groupnamedefiner, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(okcreatebutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                    .addComponent(addmembername)
                    .addComponent(addmembertogroupbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(102, 102, 102)
                .addGroup(groupscardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane7)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24)
                    .addComponent(alterb, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
                    .addComponent(createnewgroupplaylistbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(groupscardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(groupplaylistbutton, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                    .addComponent(memberofgroupbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, groupscardLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(groupscardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, groupscardLayout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addGap(216, 216, 216))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, groupscardLayout.createSequentialGroup()
                        .addComponent(jButton7)
                        .addGap(21, 21, 21))))
        );
        groupscardLayout.setVerticalGroup(
            groupscardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(groupscardLayout.createSequentialGroup()
                .addGroup(groupscardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(groupscardLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton7)
                        .addGap(2, 2, 2)
                        .addGroup(groupscardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))
                        .addGroup(groupscardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(groupscardLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(groupscardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel21)
                                    .addComponent(groupnamedefiner, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(okcreatebutton))
                                .addGap(49, 49, 49)
                                .addComponent(jLabel22)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(groupscardLayout.createSequentialGroup()
                                .addGap(95, 95, 95)
                                .addComponent(memberofgroupbutton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(groupplaylistbutton))))
                    .addGroup(groupscardLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(groupscardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(groupscardLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(addmembername, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(addmembertogroupbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, groupscardLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(alterb, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createnewgroupplaylistbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        centerpanel.add(groupscard, "card7");

        jLabel25.setText("CHANGE PLAYLIST");

        jLabel26.setText("PLAYLIST NAME:");

        altercardplaylistname.setEditable(false);

        jScrollPane8.setViewportView(altercardplaylistlist);

        altercardaddsongbutton.setText("ADD SONG");
        altercardaddsongbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altercardaddsongbuttonActionPerformed(evt);
            }
        });

        alterbackb.setText("BACK");
        alterbackb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterbackbActionPerformed(evt);
            }
        });

        jLabel42.setText("GROUP NAME:");

        altercardgroupname.setEditable(false);

        jScrollPane15.setViewportView(searchcongstoadd);

        searchsongtoaddbutton.setText("SEARCH");
        searchsongtoaddbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchsongtoaddbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout altercardLayout = new javax.swing.GroupLayout(altercard);
        altercard.setLayout(altercardLayout);
        altercardLayout.setHorizontalGroup(
            altercardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(altercardLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(altercardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(altercardLayout.createSequentialGroup()
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(148, 148, 148)
                        .addComponent(alterbackb, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(altercardLayout.createSequentialGroup()
                        .addGroup(altercardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(altercardLayout.createSequentialGroup()
                                .addComponent(jLabel42)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(altercardgroupname, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(67, 67, 67)
                                .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(altercardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(altercardplaylistname, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(altercardLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(altercardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, altercardLayout.createSequentialGroup()
                                        .addComponent(searchsongtoaddbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(altercardaddsongbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane15)
                                    .addComponent(altercardaddsongname))))))
                .addContainerGap(280, Short.MAX_VALUE))
        );
        altercardLayout.setVerticalGroup(
            altercardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(altercardLayout.createSequentialGroup()
                .addGroup(altercardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(altercardLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(altercardLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(alterbackb, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(altercardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(altercardplaylistname, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42)
                    .addComponent(altercardgroupname, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(altercardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(altercardLayout.createSequentialGroup()
                        .addComponent(jScrollPane15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(altercardaddsongname, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(altercardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(altercardaddsongbutton, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                            .addComponent(searchsongtoaddbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(160, Short.MAX_VALUE))
        );

        centerpanel.add(altercard, "card10");

        recentbutton.setText("RECENTS");
        recentbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recentbuttonActionPerformed(evt);
            }
        });

        mostplayedbutton.setText("MOST PLAYED");
        mostplayedbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostplayedbuttonActionPerformed(evt);
            }
        });

        jScrollPane9.setViewportView(historymenu);

        jTextField8.setEditable(false);

        jButton15.setText("ADD TO QUEUE");

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel27.setText("HISTORY");

        historybutton.setText("HISTORY");
        historybutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historybuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout historycardLayout = new javax.swing.GroupLayout(historycard);
        historycard.setLayout(historycardLayout);
        historycardLayout.setHorizontalGroup(
            historycardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historycardLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addGroup(historycardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mostplayedbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(recentbutton, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                    .addComponent(historybutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(92, 92, 92)
                .addGroup(historycardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                    .addComponent(jTextField8)
                    .addComponent(jScrollPane9)
                    .addGroup(historycardLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(301, Short.MAX_VALUE))
        );
        historycardLayout.setVerticalGroup(
            historycardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(historycardLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(historycardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane9)
                    .addGroup(historycardLayout.createSequentialGroup()
                        .addComponent(historybutton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(recentbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(mostplayedbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27)
                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(130, Short.MAX_VALUE))
        );

        centerpanel.add(historycard, "card8");

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel28.setText("PROFILE");

        jLabel29.setText("NAME:");

        jLabel30.setText("USER NAME:");

        jLabel31.setText("EMAIL ADDRESS:");

        namefield.setEditable(false);
        namefield.setText("jTextField12");
        namefield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namefieldActionPerformed(evt);
            }
        });

        usernamefield.setEditable(false);
        usernamefield.setText("jTextField12");

        emailfield.setEditable(false);
        emailfield.setText("jTextField12");

        jSeparator1.setForeground(new java.awt.Color(51, 51, 255));

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel32.setText("UPDATE");

        emailchangerfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailchangerfieldActionPerformed(evt);
            }
        });

        jLabel33.setText("NAME:");

        jLabel35.setText("EMAIL ADDRESS:");

        updatebutton.setText("UPDATE");
        updatebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatebuttonActionPerformed(evt);
            }
        });

        jButton17.setText("BACK");

        logoutb.setText("LOGOUT");
        logoutb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout profilecardLayout = new javax.swing.GroupLayout(profilecard);
        profilecard.setLayout(profilecardLayout);
        profilecardLayout.setHorizontalGroup(
            profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilecardLayout.createSequentialGroup()
                .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(profilecardLayout.createSequentialGroup()
                        .addGap(327, 327, 327)
                        .addComponent(jLabel28))
                    .addGroup(profilecardLayout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(profilecardLayout.createSequentialGroup()
                                .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel30)
                                    .addComponent(jLabel33))
                                .addGap(79, 79, 79)
                                .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(namefield, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(emailfield, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(usernamefield, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(profilecardLayout.createSequentialGroup()
                                .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel29)
                                    .addComponent(jLabel31))
                                .addGap(78, 78, 78)
                                .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(namechangerfield, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(emailchangerfield, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(profilecardLayout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(updatebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(profilecardLayout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(logoutb, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(profilecardLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 873, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(182, Short.MAX_VALUE))
            .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(profilecardLayout.createSequentialGroup()
                    .addGap(97, 97, 97)
                    .addComponent(jLabel35)
                    .addContainerGap(885, Short.MAX_VALUE)))
        );
        profilecardLayout.setVerticalGroup(
            profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilecardLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(profilecardLayout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addGap(18, 18, 18)
                        .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(namefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(usernamefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(emailfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(profilecardLayout.createSequentialGroup()
                        .addComponent(logoutb, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(43, 43, 43)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(namechangerfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updatebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31)
                    .addComponent(emailchangerfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(209, Short.MAX_VALUE))
            .addGroup(profilecardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(profilecardLayout.createSequentialGroup()
                    .addGap(191, 191, 191)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(416, Short.MAX_VALUE)))
        );

        centerpanel.add(profilecard, "card9");

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel36.setText("CREATE GROUP PLAYLIST");

        jLabel40.setText("PLAYLIST NAME:");

        jLabel41.setText("GROUP NAME:");

        groupnameforcreatinggroupplaylist.setEditable(false);
        groupnameforcreatinggroupplaylist.setText("jTextField2");

        refreshbuttonforcreatinggroupplaylist.setText("OK");
        refreshbuttonforcreatinggroupplaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshbuttonforcreatinggroupplaylistActionPerformed(evt);
            }
        });

        jButton1.setText("BACK");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout creategroupplaylistcardLayout = new javax.swing.GroupLayout(creategroupplaylistcard);
        creategroupplaylistcard.setLayout(creategroupplaylistcardLayout);
        creategroupplaylistcardLayout.setHorizontalGroup(
            creategroupplaylistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, creategroupplaylistcardLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel36)
                .addGap(318, 318, 318))
            .addGroup(creategroupplaylistcardLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(groupnameforcreatinggroupplaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(playlistnameforcreategroupplaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(refreshbuttonforcreatinggroupplaylist)
                .addGap(35, 35, 35)
                .addComponent(jButton1)
                .addContainerGap(86, Short.MAX_VALUE))
        );
        creategroupplaylistcardLayout.setVerticalGroup(
            creategroupplaylistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(creategroupplaylistcardLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jLabel36)
                .addGap(46, 46, 46)
                .addGroup(creategroupplaylistcardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(groupnameforcreatinggroupplaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playlistnameforcreategroupplaylist, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshbuttonforcreatinggroupplaylist)
                    .addComponent(jButton1))
                .addContainerGap(483, Short.MAX_VALUE))
        );

        centerpanel.add(creategroupplaylistcard, "card11");

        mainpanel.add(centerpanel, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainpanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newsongbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newsongbuttonActionPerformed
        // TODO add your handling code here:
        new Thread(new Runnable() {
            @Override
            public void run() {
                NewSongsRequest newSongsRequest= new NewSongsRequest();
                newSongsRequest.setNumberOfSongs(10);
                try {
                    //sending request to object output stream
                    MainClass.oos.writeObject(newSongsRequest);
                    MainClass.oos.flush();
                    //accepting request from input stream
                    
                    Response response = (Response) MainClass.ois.readObject();
                    
                    if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                        //
                        //display songs recieved in list 
                        //
                        //System.out.println("inside if block");
                        ArrayList<String> songArray= (ArrayList<String>) response.getResponseObject();
                        int len=songArray.size();
                        DefaultListModel model=new DefaultListModel();
                        model.removeAllElements();
                        songlistmenu.setModel(model);
                        for (int i=0;i<len;i++){
                            
                            model.add(i,songArray.get(i));
                        }
                        songlistmenu.setModel(model);
                        
                
            }
                    else{
                        JOptionPane.showMessageDialog(null, "NO NEW SONGS IN SERVER");
                    }
                    
                } catch (IOException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                }
                
  
            }
        }).start();
    }//GEN-LAST:event_newsongbuttonActionPerformed

    private void addsongbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addsongbuttonActionPerformed
        // TODO add your handling code here:
        String s= songlistmenu.getSelectedValue();
        queueEditor.addsongtoqueue(s);
       
    }//GEN-LAST:event_addsongbuttonActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void emailchangerfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailchangerfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailchangerfieldActionPerformed

    private void homebMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homebMouseClicked
        // TODO add your handling code here:
        homecard.setVisible(true);
        mp3card.setVisible(false);
        searchcard.setVisible(false);
        nowcard.setVisible(false);
        playlistcard.setVisible(false);
        groupscard.setVisible(false);
        historycard.setVisible(false);
        profilecard.setVisible(false);
    }//GEN-LAST:event_homebMouseClicked

    private void mp3bMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mp3bMouseClicked
        // TODO add your handling code here:
        homecard.setVisible(false);
        mp3card.setVisible(false);
        searchcard.setVisible(false);
        nowcard.setVisible(false);
        playlistcard.setVisible(false);
        groupscard.setVisible(false);
        historycard.setVisible(false);
        profilecard.setVisible(false);
        
        mp3playeroffline mp3player =new mp3playeroffline();
        mp3player.setVisible(true);
        mp3player.setLocationRelativeTo(null);
    }//GEN-LAST:event_mp3bMouseClicked

    private void searchbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchbMouseClicked
        // TODO add your handling code here:
        homecard.setVisible(false);
        mp3card.setVisible(false);
        searchcard.setVisible(true);
        nowcard.setVisible(false);
        playlistcard.setVisible(false);
        groupscard.setVisible(false);
        historycard.setVisible(false);
        profilecard.setVisible(false);
    }//GEN-LAST:event_searchbMouseClicked

    private void nowbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nowbMouseClicked
        // TODO add your handling code here:
        homecard.setVisible(false);
        mp3card.setVisible(false);
        searchcard.setVisible(false);
        nowcard.setVisible(true);
        playlistcard.setVisible(false);
        groupscard.setVisible(false);
        historycard.setVisible(false);
        profilecard.setVisible(false);
    }//GEN-LAST:event_nowbMouseClicked
 
    private void playlistbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playlistbMouseClicked
        // TODO add your handling code here:
        homecard.setVisible(false);
        mp3card.setVisible(false);
        searchcard.setVisible(false);
        nowcard.setVisible(false);
        playlistcard.setVisible(true);
        groupscard.setVisible(false);
        historycard.setVisible(false);
        profilecard.setVisible(false);
        
        GetPlaylistRequest getPlaylistRequest =new GetPlaylistRequest();
        getPlaylistRequest.setUserName(MainClass.user.getUserName());
        try {
            MainClass.oos.writeObject(getPlaylistRequest);
            MainClass.oos.flush();
            
            Response response=(Response)MainClass.ois.readObject();
            DefaultListModel defaultListModel1 =new DefaultListModel();
            defaultListModel1.clear();
            
            allplaylistlist.setModel(defaultListModel1);
            if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                ArrayList<String> listofplaylist =new ArrayList<>();
                listofplaylist=(ArrayList<String>) response.getResponseObject();
                for (int i=0;i<listofplaylist.size();i++){
                    defaultListModel1.add(i, listofplaylist.get(i));
                }
                allplaylistlist.setModel(defaultListModel1);
            }
            else{
                JOptionPane.showMessageDialog(null, "NO PLAYLISTS FOUND");
            }
            
        } catch (IOException ex) {
            Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }//GEN-LAST:event_playlistbMouseClicked

    private void groupsbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_groupsbMouseClicked
        // TODO add your handling code here:
        homecard.setVisible(false);
        mp3card.setVisible(false);
        searchcard.setVisible(false);
        nowcard.setVisible(false);
        playlistcard.setVisible(false);
        groupscard.setVisible(true);
        historycard.setVisible(false);
        profilecard.setVisible(false);
        
        new Thread(new Runnable() {

            @Override
            public void run() {
                GetGroupsRequest getGroupsRequest = new GetGroupsRequest(MainClass.user.getUserName());
                try{
                   MainClass.oos.writeObject(getGroupsRequest);
                   MainClass.oos.flush();
                   
                   Response response = (Response) MainClass.ois.readObject();
                   
                   if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                       ArrayList<String> groups = (ArrayList<String>)response.getResponseObject();
                      DefaultListModel defaultListModel = new DefaultListModel();
                      defaultListModel.clear();
                      grouplists.setModel(defaultListModel);
                       System.out.println(groups);
                      for(int i=0; i<groups.size(); i++){
                          defaultListModel.add(i, groups.get(i));
                      }
                      grouplists.setModel(defaultListModel);
                   }
                   else if(response.getResponseCode().equals(ResponseCode.FAILURE)){
                       JOptionPane.showMessageDialog(null, "NO GROUP PLAYLIST FOUND FOR THIS USER");
                   }
                } catch(HeadlessException | IOException | ClassNotFoundException e) {}
            }
        }).start();
    }//GEN-LAST:event_groupsbMouseClicked

    private void historybMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historybMouseClicked
        // TODO add your handling code here:
        homecard.setVisible(false);
        mp3card.setVisible(false);
        searchcard.setVisible(false);
        nowcard.setVisible(false);
        playlistcard.setVisible(false);
        groupscard.setVisible(false);
        historycard.setVisible(true);
        profilecard.setVisible(false);
    }//GEN-LAST:event_historybMouseClicked

    private void profilebMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profilebMouseClicked
        // TODO add your handling code here:
        homecard.setVisible(false);
        mp3card.setVisible(false);
        searchcard.setVisible(false);
        nowcard.setVisible(false);
        playlistcard.setVisible(false);
        groupscard.setVisible(false);
        historycard.setVisible(false);
        profilecard.setVisible(true);
        
        namefield.setText(MainClass.user.getName());
        usernamefield.setText(MainClass.user.getUserName());
        emailfield.setText(MainClass.user.getEmail());
    }//GEN-LAST:event_profilebMouseClicked

    private void alterbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterbActionPerformed
        // TODO add your handling code here:
        if(groupplaylistlists.isSelectionEmpty()){
            JOptionPane.showMessageDialog(null,"SELECT ATLEAST ONE PLAYLIST TO ALTER....");
        }
        else{
        homecard.setVisible(false);
        mp3card.setVisible(false);
        searchcard.setVisible(false);
        nowcard.setVisible(false);
        playlistcard.setVisible(false);
        groupscard.setVisible(false);
        historycard.setVisible(false);
        profilecard.setVisible(false);
        altercard.setVisible(true);
        creategroupplaylistcard.setVisible(false);
        
        GetGroupPlaylistMusicRequest getGroupPlaylistMusicRequest =new GetGroupPlaylistMusicRequest(grouplists.getSelectedValue(), groupplaylistlists.getSelectedValue());
        
            try {
                MainClass.oos.writeObject(getGroupPlaylistMusicRequest);
                MainClass.oos.flush();
                
                Response response =(Response) MainClass.ois.readObject();
                if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                    DefaultListModel defaultListModel =new DefaultListModel();
                    defaultListModel.clear();
                    altercardplaylistlist.setModel(defaultListModel);
                    ArrayList<String> playlistsongs =new ArrayList<>();
                    playlistsongs=(ArrayList<String>) response.getResponseObject();
                    for(int i=0;i<playlistsongs.size();i++){
                        defaultListModel.add(i,playlistsongs.get(i));
                        
                    }
                    altercardplaylistlist.setModel(defaultListModel);
                }
                
            } catch (IOException ex) {
                Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        altercardplaylistname.setText(groupplaylistlists.getSelectedValue());
        altercardgroupname.setText(grouplists.getSelectedValue());
        }
    }//GEN-LAST:event_alterbActionPerformed

    private void alterbackbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterbackbActionPerformed
        // TODO add your handling code here:
        homecard.setVisible(false);
        mp3card.setVisible(false);
        searchcard.setVisible(false);
        nowcard.setVisible(false);
        playlistcard.setVisible(false);
        groupscard.setVisible(true);
        historycard.setVisible(false);
        profilecard.setVisible(false);
        altercard.setVisible(false);
    }//GEN-LAST:event_alterbackbActionPerformed

    private void logoutbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutbActionPerformed
        // TODO add your handling code here:
        loginform lform =new loginform();
        lform.setVisible(true);
        homecard.setVisible(false);
        mp3card.setVisible(false);
        searchcard.setVisible(false);
        nowcard.setVisible(false);
        playlistcard.setVisible(false);
        groupscard.setVisible(false);
        historycard.setVisible(false);
        profilecard.setVisible(false);
    }//GEN-LAST:event_logoutbActionPerformed

    private void trendingbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trendingbuttonActionPerformed
        // TODO add your handling code here:
        new Thread(new Runnable() {
            @Override
            public void run() {
                TrendingRequest trendingSongsRequest= new TrendingRequest();
                trendingSongsRequest.setNumberOfSongs(10);
                try {
                    //sending request to object output stream
                    MainClass.oos.writeObject(trendingSongsRequest);
                    MainClass.oos.flush();
                    //accepting request from input stream
                    Response response = (Response) MainClass.ois.readObject();
                    
                    if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                        //
                        //display songs recieved in list 
                        //
                        
                        ArrayList<String> songArray= (ArrayList<String>) response.getResponseObject();
                        int len=songArray.size();
                        DefaultListModel model=new DefaultListModel();
                        model.removeAllElements();
                        songlistmenu.setModel(model);
                        for (int i=0;i<len;i++){
                            
                            model.add(i,songArray.get(i));
                        }
                        songlistmenu.setModel(model);
                        
                
            }
                    else{
                        JOptionPane.showMessageDialog(null, "NO TRENDING SONGS IN SERVER");
                    }
                    
                } catch (IOException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                 //To change body of generated methods, choose Tools | Templates.
            }
        }).start();

    }//GEN-LAST:event_trendingbuttonActionPerformed

    private void recommendedbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recommendedbuttonActionPerformed
        // TODO add your handling code here:
        new Thread(new Runnable() {
            @Override
            public void run() {
                RecommendationRequest recommendationSongsRequest= new RecommendationRequest();
                recommendationSongsRequest.setGenre(MainClass.user.getGenre());
                recommendationSongsRequest.setLanguage(MainClass.user.getLanguage());
                
                try {
                    //sending request to object output stream
                    MainClass.oos.writeObject(recommendationSongsRequest);
                    MainClass.oos.flush();
                    //accepting request from input stream
                    Response response = (Response) MainClass.ois.readObject();
                    
                    if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                        //
                        //display songs recieved in list 
                        //
                        ArrayList<String> songArray= (ArrayList<String>) response.getResponseObject();
                        int len=songArray.size();
                        DefaultListModel model=new DefaultListModel();
                        model.removeAllElements();
                        songlistmenu.setModel(model);
                        for (int i=0;i<len;i++){
                            
                           model.add(i,songArray.get(i));
                        }
                        songlistmenu.setModel(model);
                        
                
            
                        
                        
                
            }
                    else{
                        JOptionPane.showMessageDialog(null, "NO RECOMMENDED SONGS ..");
                    }
                    
                } catch (IOException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                 //To change body of generated methods, choose Tools | Templates.
            }
        }).start();
    }//GEN-LAST:event_recommendedbuttonActionPerformed

    private void filterartistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterartistActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_filterartistActionPerformed

    private void filterbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterbuttonActionPerformed
        // TODO add your handling code here:
        String artist,genre,language,name; 
         artist = (String)filterartist.getSelectedItem();
         genre = (String)filtergenre.getSelectedItem();
        language = (String)filterlanguage.getSelectedItem();
        
        
        if(filtername.getText().equals(""))
            name=null;
        else
            name = filtername.getText();
        
        
        if("--SELECT--".equals(artist) && "--SELECT--".equals(genre) && "--SELECT--".equals(language) && name==null){
            JOptionPane.showMessageDialog(null, "enter atleast a filter element"); }
        else{
            
            
        new Thread(new Runnable() {
            @Override
            public void run() {
                String name = filtername.getText();
        
                    
                SearchSongRequest searchSongRequest=new SearchSongRequest((String)filterartist.getSelectedItem(),(String)filtergenre.getSelectedItem(),(String)filterlanguage.getSelectedItem(),name);
                try {
                    MainClass.oos.writeObject(searchSongRequest);
                    MainClass.oos.flush();
                } catch (IOException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                try {
                    Response response;
                    response = (Response) MainClass.ois.readObject();
                    
                     if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                        //
                        //display songs recieved in list 
                        //
                        ArrayList<String> songArrayFilter= (ArrayList<String>) response.getResponseObject();
                        int len=songArrayFilter.size();
                        DefaultListModel model=new DefaultListModel();
                        model.removeAllElements();
                        resultmenu.setModel(model);
                        for (int i=0;i<len;i++){
                            
                            model.add(i,songArrayFilter.get(i));
                        }
                        resultmenu.setModel(model);
            }
                    else{
                        JOptionPane.showMessageDialog(null, "NO SONGS FOUND");
                    }
                } catch (IOException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }).start();
        }  
    }//GEN-LAST:event_filterbuttonActionPerformed

    private void historybuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historybuttonActionPerformed
        // TODO add your handling code here:
        new Thread(new Runnable() {
            @Override
            public void run() {
                HistoryRequest historyRequest =new HistoryRequest();
                historyRequest.setUserName(MainClass.user.getUserName());
                historyRequest.setNumberOfSongs(20);
                
                try {
                    MainClass.oos.writeObject(historyRequest);
                    MainClass.oos.flush();
                    
                    Response response =(Response)MainClass.ois.readObject();
                     if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                        //
                        //display songs recieved in list 
                        //
                        ArrayList<String> songArrayHistory= (ArrayList<String>) response.getResponseObject();
                        int len=songArrayHistory.size();
                        DefaultListModel model=new DefaultListModel();
                        model.removeAllElements();
                        historymenu.setModel(model);
                        for (int i=0;i<len;i++){
                            
                            model.add(i,songArrayHistory.get(i));
                        }
                        historymenu.setModel(model);
                        
                
            
                        
                        
                
            }
                    else{
                        JOptionPane.showMessageDialog(null, "error");
                    }
                    
                } catch (IOException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                }
                //To change body of generated methods, choose Tools | Templates.
            }
        }).start();
    }//GEN-LAST:event_historybuttonActionPerformed

    private void recentbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentbuttonActionPerformed
        // TODO add your handling code here:
        new Thread(new Runnable() {
            @Override
            public void run() {
                HistoryRequest historyRequest =new HistoryRequest();
                historyRequest.setUserName(MainClass.user.getUserName());
                historyRequest.setNumberOfSongs(10);
                
                try {
                    MainClass.oos.writeObject(historyRequest);
                    MainClass.oos.flush();
                    
                    Response response =(Response)MainClass.ois.readObject();
                     if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                        //
                        //display songs recieved in list 
                        //
                        ArrayList<String> songArrayHistory= (ArrayList<String>) response.getResponseObject();
                        int len=songArrayHistory.size();
                        DefaultListModel model=new DefaultListModel();
                        model.removeAllElements();
                        historymenu.setModel(model);
                        for (int i=0;i<len;i++){
                            
                            model.add(i,songArrayHistory.get(i));
                        }
                        historymenu.setModel(model);
                        
                
            }
                    else{
                        JOptionPane.showMessageDialog(null, "error");
                    }
                    
                } catch (IOException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                }
                //To change body of generated methods, choose Tools | Templates.
            }
        }).start();
        
    }//GEN-LAST:event_recentbuttonActionPerformed

    private void mostplayedbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostplayedbuttonActionPerformed
        // TODO add your handling code here:
        //
        // have to cahnege it
        //
        new Thread(new Runnable() {
            @Override
            public void run() {
                HistoryRequest historyRequest =new HistoryRequest();
                historyRequest.setUserName(MainClass.user.getUserName());
                historyRequest.setNumberOfSongs(20);
                
                try {
                    MainClass.oos.writeObject(historyRequest);
                    MainClass.oos.flush();
                    
                    Response response =(Response)MainClass.ois.readObject();
                     if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                        //
                        //display songs recieved in list 
                        //
                        ArrayList<String> songArrayHistory= (ArrayList<String>) response.getResponseObject();
                        int len=songArrayHistory.size();
                        DefaultListModel model=new DefaultListModel();
                        model.removeAllElements();
                        historymenu.setModel(model);
                        for (int i=0;i<len;i++){
                            
                            model.add(i,songArrayHistory.get(i));
                        }
                        historymenu.setModel(model);
                        
                
            
                        
                        
                
            }
                    else{
                        JOptionPane.showMessageDialog(null, "error");
                    }
                    
                } catch (IOException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                }
                 //To change body of generated methods, choose Tools | Templates.
            }
        }).start();
    }//GEN-LAST:event_mostplayedbuttonActionPerformed

    private void namefieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namefieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namefieldActionPerformed

    private void updatebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatebuttonActionPerformed
        // TODO add your handling code here:
        
        new Thread(new Runnable() {
      @Override
      public void run() {
          String name=namechangerfield.getText();
        String email=emailchangerfield.getText();
        UpdateRequest updateRequest =new UpdateRequest();
       if(name.equals("")){
        updateRequest.setName(MainClass.user.getName());
    }
       else{
           updateRequest.setName(name);
       }
       
       if(email.equals("")){
        updateRequest.setEmail(MainClass.user.getEmail());
    }
       else{
           updateRequest.setEmail(email);
       }
    updateRequest.setUserName(MainClass.user.getUserName());
    
        
        
        try {
            MainClass.oos.writeObject(updateRequest);
            MainClass.oos.flush();
            Response response = (Response) MainClass.ois.readObject();
             
            if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                
                MainClass.user = (User) response.getResponseObject();
                namefield.setText(MainClass.user.getName());
                emailfield.setText(MainClass.user.getEmail());
                
            }
            else{
                JOptionPane.showMessageDialog(null,"update unsucessfull!!");
           }
        } catch (ClassNotFoundException e) { e.printStackTrace(); System.out.println("RESPONSE exception");} catch (IOException ex) {
               Logger.getLogger(loginform.class.getName()).log(Level.SEVERE, null, ex);
           }
    
      }
    }).start();
        
    }//GEN-LAST:event_updatebuttonActionPerformed

    private void deletefromqueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletefromqueueActionPerformed
        // TODO add your handling code here:
        deletesong.setText(queuelist.getSelectedValue());
        String deletesongnamefromqueue =deletesong.getText();
        queueEditor.deletesongfromqueue(deletesongnamefromqueue);
        displayupdated.setText("DELETED FORM QUEUE...");
    }//GEN-LAST:event_deletefromqueueActionPerformed

    private void playallbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playallbuttonActionPerformed
        // TODO add your handling code here:
        ArrayList<String> playalllist=new ArrayList<>();
        int len=songlistmenu.getModel().getSize();
        for (int i=0;i<len;i++){
            playalllist.add(songlistmenu.getModel().getElementAt(i));
        }
        queueEditor.addplaylisttoqueue(playalllist);
        
//        String s= songlistmenu.getSelectedValue();
//        QueueEditor.nowplayinglist.add(s);
//        System.out.println(QueueEditor.nowplayinglist);
//        
//        queueEditor.sendtoqueue(this);
//        
        
        
    }//GEN-LAST:event_playallbuttonActionPerformed

    private void addsongsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addsongsearchActionPerformed
        // TODO add your handling code here:
        String s= resultmenu.getSelectedValue();
        queueEditor.addsongtoqueue(s);
    }//GEN-LAST:event_addsongsearchActionPerformed

    private void addplaylisttoqueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addplaylisttoqueueActionPerformed
        if(allplaylistlist.isSelectionEmpty()){
            JOptionPane.showMessageDialog(null, "SELECT A PLAYLIST TO PLAY");
        }
        else{
        GetPlaylistSongsRequest getPlaylistSongsRequest =new GetPlaylistSongsRequest(MainClass.user.getUserName(), allplaylistlist.getSelectedValue());
        
            try {
                MainClass.oos.writeObject(getPlaylistSongsRequest);
                 MainClass.oos.flush();
                  Response response =(Response) MainClass.ois.readObject();
            if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                ArrayList<String> songs =new ArrayList<>();
                songs=(ArrayList<String>) response.getResponseObject();
                queueEditor.addplaylisttoqueue(songs);
                allplaylistlist.clearSelection();
            }
            else if(response.getResponseCode().equals(ResponseCode.FAILURE)){
                JOptionPane.showMessageDialog(null, "NO SONGS IN THIS PLAYLIST");
            }
            } catch (IOException ex) {
                Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            
        }
    }//GEN-LAST:event_addplaylisttoqueueActionPerformed

    private void okbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okbuttonActionPerformed
        
        String playlistname=playlisttextfield.getText();
        if(playlistname.equals("")){
              JOptionPane.showMessageDialog(null, "ENTER PLAYLIST NAME");
        }
        else{
            new Thread(new Runnable() {

                @Override
                public void run() {
                CreatePlaylistRequest createPlaylistRequest =new CreatePlaylistRequest(MainClass.user.getUserName(), playlisttextfield.getText());
        try {
            MainClass.oos.writeObject(createPlaylistRequest);
            MainClass.oos.flush();
            
            Response response =(Response) MainClass.ois.readObject();
            
            if(response.getResponseCode().equals(ResponseCode.NEW_PLAYLIST_CREATED)){
                
                DefaultListModel defaultListModel = (DefaultListModel) allplaylistlist.getModel();
                defaultListModel.addElement(playlisttextfield.getText());
                allplaylistlist.setModel(defaultListModel);
                playlisttextfield.setText("");
                JOptionPane.showMessageDialog(null, "NEW PLAYLIST CREATED");
            }
            
            else if(response.getResponseCode().equals(ResponseCode.ALREADY_EXISTS)){
                JOptionPane.showMessageDialog(null, "PLAYLIST ALREADY EXISTS");
                playlisttextfield.setText("");
            }
            else if(response.getResponseCode().equals(ResponseCode.FAILURE)){
                JOptionPane.showMessageDialog(null, "ERROR FOUND");
                playlisttextfield.setText("");
            }
            }  catch (IOException ex) {
            Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
        }
            }
        }).start();
        }
    }//GEN-LAST:event_okbuttonActionPerformed

    private void playlisttextfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playlisttextfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playlisttextfieldActionPerformed

    private void addsongtoplaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addsongtoplaylistActionPerformed

          String songname = searchsonglist.getSelectedValue();
          if(songname.equals("") || allplaylistlist.isSelectionEmpty()){
              JOptionPane.showMessageDialog(null, "SELECT A PLAYLIST AND A SONG TO ADD");
          }
          else{
              new Thread(new Runnable() {

                  @Override
                  public void run() {
                      AddSongToPlaylistRequest addSongToPlaylistRequest =new AddSongToPlaylistRequest();
                      addSongToPlaylistRequest.setPName(allplaylistlist.getSelectedValue());
                      addSongToPlaylistRequest.setUserName(MainClass.user.getUserName());
                      addSongToPlaylistRequest.setSong(searchsonglist.getSelectedValue());
                      
                      try{
                      MainClass.oos.writeObject(addSongToPlaylistRequest);
                      MainClass.oos.flush();
                      
                      Response response = (Response) MainClass.ois.readObject();
                       if(response.getResponseCode().equals(ResponseCode.ALREADY_EXISTS)){
                           JOptionPane.showMessageDialog(null, "THIS SONG ALREADY EXISTS IN PLAYLIST");
                       }
                       
                       else if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                           DefaultListModel defaultListModel =(DefaultListModel) playlistallsongs.getModel();
                           defaultListModel.addElement(searchsonglist.getSelectedValue());
                           playlistallsongs.setModel(defaultListModel);
                           
                           defaultListModel.clear();
                           searchsonglist.setModel(defaultListModel);
                           allplaylistlist.clearSelection();
                       }
                       
                       else{
                           JOptionPane.showMessageDialog(null, "UNKNOWN ERROR");
                       
                       }
                      } catch(Exception e){}
                  }
              }).start();
          }
    }//GEN-LAST:event_addsongtoplaylistActionPerformed

    private void viewsongsofplaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewsongsofplaylistActionPerformed

        if(allplaylistlist.isSelectionEmpty()){
            JOptionPane.showMessageDialog(null, "SELECT A PLAYLIST TO VIEW SONGS");
        }
        
        else{
        GetPlaylistSongsRequest getPlaylistSongsRequest =new GetPlaylistSongsRequest(MainClass.user.getUserName(), allplaylistlist.getSelectedValue());
        
            try {
                MainClass.oos.writeObject(getPlaylistSongsRequest);
                 MainClass.oos.flush();
                  Response response =(Response) MainClass.ois.readObject();
            if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                ArrayList<String> songs =new ArrayList<>();
                songs=(ArrayList<String>) response.getResponseObject();
                DefaultListModel defaultListModel =new DefaultListModel();
                defaultListModel.clear();
                playlistallsongs.setModel(defaultListModel);
                int i=0;
                for(i=0;i<songs.size();i++){
                    defaultListModel.add(i, songs.get(i));
                    
                }
                playlistallsongs.setModel(defaultListModel);
                allplaylistlist.clearSelection();
            }
            else{
                JOptionPane.showMessageDialog(null, "NO SONGS IN THIS PLAYLIST");
                allplaylistlist.clearSelection();
                DefaultListModel defaultListModel =new DefaultListModel();
                defaultListModel.clear();
                playlistallsongs.setModel(defaultListModel);
            }
            } catch (IOException ex) {
                Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
            Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_viewsongsofplaylistActionPerformed

    private void updatelistbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatelistbuttonActionPerformed
        // TODO add your handling code here:
        int upindex=-1;
        int downindex=-1;
       upindex= getQueueUp().getSelectedIndex();
       downindex=getQueueDown().getSelectedIndex();
       queueEditor.updatequeue(upindex,downindex);
       displayupdated.setText("QUEUE UPADTED...");
       
    }//GEN-LAST:event_updatelistbuttonActionPerformed

    private void sharewithuserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sharewithuserActionPerformed
        if(targetuserfield.getText().equals("") || allplaylistlist.isSelectionEmpty()){
            JOptionPane.showMessageDialog(null, "ENTER USERNAME AND SELECT PLAYLIST");
        }
        else{
        new Thread(new Runnable() {
            @Override
            public void run() {
                 String targetedusername =targetuserfield.getText();
                 String playlistshare =allplaylistlist.getSelectedValue();
                 SharePlaylistRequest sharePlaylistRequest =new SharePlaylistRequest(MainClass.user.getUserName(), targetedusername, playlistshare);
                try {
                    MainClass.oos.writeObject(sharePlaylistRequest);
                    MainClass.oos.flush();
                    
                    Response response=(Response) MainClass.ois.readObject();
                    if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                        JOptionPane.showMessageDialog(null, "PLAYLIST SHARED SUCCESSFULLY");
                        allplaylistlist.clearSelection();
                        targetuserfield.setText("");
                    }
                    else if(response.getResponseCode().equals(ResponseCode.ALREADY_EXISTS)){
                        JOptionPane.showMessageDialog(null, "PLAYLIST ALREADY EXISTS FOR GIVEN USER");
                        allplaylistlist.clearSelection();
                        targetuserfield.setText("");
                    }
                    else if(response.getResponseCode().equals(ResponseCode.FAILURE)){
                        JOptionPane.showMessageDialog(null, "NO SUCH USER EXISTS");
                        allplaylistlist.clearSelection();
                        targetuserfield.setText("");
                    }
                } catch (IOException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        }).start();
       
        }
    }//GEN-LAST:event_sharewithuserActionPerformed

    private void addmembertogroupbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addmembertogroupbuttonActionPerformed
        // TODO add your handling code here:
        if(addmembername.getText().equals("") || grouplists.isSelectionEmpty()){
            JOptionPane.showMessageDialog(null,"ENTER USERNAME TO ADD...");
        }
        else{
            new Thread(new Runnable() {
                @Override
                public void run() {
                    DefaultListModel defaultListModel=(DefaultListModel) memberlistvisible.getModel();
                
                    
                    AddGroupMemberRequest addGroupMemberRequest =new AddGroupMemberRequest(addmembername.getText(),grouplists.getSelectedValue());
                   
                   
                    try {
                        MainClass.oos.writeObject(addGroupMemberRequest);
                        MainClass.oos.flush();
                        
                        Response response =(Response) new MainClass().ois.readObject();
                        
                        if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                            
                            JOptionPane.showMessageDialog(null,"ADDED TO GROUP SUCESSFULLY...");
                            
                        }
                        else if(response.getResponseCode().equals(ResponseCode.ALREADY_EXISTS)){
                            JOptionPane.showMessageDialog(null,"USER ALREADY EXIST IN GROUP...");
                        }
                        else{
                            JOptionPane.showMessageDialog(null,"USERNAME DOESN'T EXIST");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    
                     //To change body of generated methods, choose Tools | Templates.
                }
            }).start();
        }
    }//GEN-LAST:event_addmembertogroupbuttonActionPerformed

    private void groupplaylistbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupplaylistbuttonActionPerformed
        // TODO add your handling code here:
        String groupselected=grouplists.getSelectedValue();
        if(groupselected ==null){
            JOptionPane.showMessageDialog(null, "select group first");
        }
        else{
            new Thread(new Runnable() {
                @Override
                public void run() {
                    DefaultListModel defaultListModel=new DefaultListModel();
                defaultListModel.clear();
                groupplaylistlists.setModel(defaultListModel);
                
                    GetGroupPlaylistRequest getGroupPlaylistRequest =new GetGroupPlaylistRequest(groupselected);
                    try {
                        MainClass.oos.writeObject(getGroupPlaylistRequest);
                        MainClass.oos.flush();
                        
                        Response response =(Response) new MainClass().ois.readObject();
                        
                        if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                            ArrayList<String> playlistsofgroup =(ArrayList<String>) response.getResponseObject();
                            for (int i=0;i<playlistsofgroup.size();i++){
                                defaultListModel.add(i, playlistsofgroup.get(i));
                            }
                            groupplaylistlists.setModel(defaultListModel);
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    
                     //To change body of generated methods, choose Tools | Templates.
                }
            }).start();
            
        }
    }//GEN-LAST:event_groupplaylistbuttonActionPerformed

    private void createnewgroupplaylistbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createnewgroupplaylistbuttonActionPerformed
        // TODO add your handling code here:
        if(grouplists.isSelectionEmpty()){
            JOptionPane.showMessageDialog(null,"SELECT GROUP TO CONTINUE....");
        }
        else{
        homecard.setVisible(false);
        mp3card.setVisible(false);
        searchcard.setVisible(false);
        nowcard.setVisible(false);
        playlistcard.setVisible(false);
        groupscard.setVisible(false);
        historycard.setVisible(false);
        profilecard.setVisible(false);
        altercard.setVisible(false);
        creategroupplaylistcard.setVisible(true);
        groupnameforcreatinggroupplaylist.setText(grouplists.getSelectedValue());
        }
    }//GEN-LAST:event_createnewgroupplaylistbuttonActionPerformed

    private void refreshbuttonforcreatinggroupplaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshbuttonforcreatinggroupplaylistActionPerformed
        // TODO add your handling code here:
        if(playlistnameforcreategroupplaylist.getText().equals("")){
            JOptionPane.showMessageDialog(null,"ENTER PLAYLIST NAME TO CREATE....");
        }
        else{
            CreateGroupPlaylistRequest createGroupPlaylistRequest =new CreateGroupPlaylistRequest(groupnameforcreatinggroupplaylist.getText(), playlistnameforcreategroupplaylist.getText());
            try {
                MainClass.oos.writeObject(createGroupPlaylistRequest);
                MainClass.oos.flush();
                
                Response response =(Response) MainClass.ois.readObject();
                if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                    JOptionPane.showMessageDialog(null,"PLAYLIST CREATED IN GROUP....");
                    playlistnameforcreategroupplaylist.setText("");
                }
                else if(response.getResponseCode().equals(ResponseCode.FAILURE)){
                    JOptionPane.showMessageDialog(null,"CAN'T CREATE THIS PLAYLIST....");
                    playlistnameforcreategroupplaylist.setText("");
                }
                else{
                    JOptionPane.showMessageDialog(null,"PLAYLIST ALREADY EXISTS....");
                    playlistnameforcreategroupplaylist.setText("");
                }
            } catch (IOException ex) {
                Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
            }
             
    }
    }//GEN-LAST:event_refreshbuttonforcreatinggroupplaylistActionPerformed

    private void altercardaddsongbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altercardaddsongbuttonActionPerformed
        // TODO add your handling code here:
        
        
          if( searchcongstoadd.isSelectionEmpty()){
              JOptionPane.showMessageDialog(null, "SELECT A SONG TO ADD...");
          }
          else{
              new Thread(new Runnable() {

                  @Override
                  public void run() {
                      
                      AddSongToGroupPlaylist addSongToGroupPlaylist =new AddSongToGroupPlaylist(altercardgroupname.getText(), altercardplaylistname.getText(), searchcongstoadd.getSelectedValue());
                      try{
                      MainClass.oos.writeObject(addSongToGroupPlaylist);
                      MainClass.oos.flush();
                      
                      Response response = (Response) MainClass.ois.readObject();
                       if(response.getResponseCode().equals(ResponseCode.ALREADY_EXISTS)){
                           JOptionPane.showMessageDialog(null, "THIS SONG ALREADY EXISTS IN PLAYLIST");
                           searchcongstoadd.clearSelection();
                           altercardaddsongname.setText("");
                       }
                       
                       else if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                           DefaultListModel defaultListModel =(DefaultListModel) altercardplaylistlist.getModel();
                           defaultListModel.addElement(searchcongstoadd.getSelectedValue());
                           altercardplaylistlist.setModel(defaultListModel);
                           
                           searchcongstoadd.clearSelection();
                           altercardaddsongname.setText("");
                       }
                       
                       else if (response.getResponseCode().equals(ResponseCode.FAILURE)){
                           JOptionPane.showMessageDialog(null, "song can't be added");
                       searchcongstoadd.clearSelection();
                           altercardaddsongname.setText("");
                       }
                       else{
                           JOptionPane.showMessageDialog(null,"UNKNOWN ERROR");
                       }
                      } catch(Exception e){}
                  }
              }).start();
          }
       
    }//GEN-LAST:event_altercardaddsongbuttonActionPerformed

    private void downlaodsongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downlaodsongActionPerformed
        // TODO add your handling code here:
        if(resultmenu.isSelectionEmpty()){
            JOptionPane.showMessageDialog(null,"ENTER SONG NAME TO DOWNLOAD....");
        }
        else{
            new Thread(new Runnable() {
                @Override
                public void run() {
                    String downloadsongname=resultmenu.getSelectedValue();
        try {
            downloadSongnamee =new DownloadSong(downloadsongname);
        } catch (IOException ex) {
            Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        }
                
                    
                
            }).start();
        }
    }//GEN-LAST:event_downlaodsongActionPerformed

    private void playdownlaodsbMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playdownlaodsbMouseClicked
        // TODO add your handling code here:
        mp3playeroffline mpp =new mp3playeroffline(this.queueEditor);
                
        mpp.setVisible(true);
        String[] pathnames;
        File f= new File("C:\\Ampify_Downloaded_Songs");
        pathnames =f.list();
        ArrayList<String> tolist=new ArrayList<String>(Arrays.asList(pathnames));
        //System.out.println(tolist);
        queueEditor.addplaylisttoqueue(tolist);
        
    }//GEN-LAST:event_playdownlaodsbMouseClicked

    private void searchsongbtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchsongbtActionPerformed
    String searchsong = searchsongtf.getText();
    if(searchsong.equals("")){
        JOptionPane.showMessageDialog(null, "ENTER A QUERY TO SEARCH");
    }
    
    else{
        new Thread(new Runnable() {

            @Override
            public void run() {
                SearchSongRequest searchSongRequest = new SearchSongRequest("--SELECT--", "--SELECT--", "--SELECT--", searchsongtf.getText());
                try{
                    MainClass.oos.writeObject(searchSongRequest);
                    MainClass.oos.flush();
                    
                    Response response = (Response) MainClass.ois.readObject();
                    
                    if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                        ArrayList<String> songs = new ArrayList<>();
                        songs = (ArrayList<String>) response.getResponseObject();
                        DefaultListModel defaulListModel = new DefaultListModel();
                        defaulListModel.clear();
                        searchsonglist.setModel(defaulListModel);
                        
                        for(int i=0; i<songs.size();i++){
                          defaulListModel.add(i, songs.get(i));
                        }
                        searchsonglist.setModel(defaulListModel);
                        searchsongtf.setText("");
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "NO SONGS FOUND");
                        DefaultListModel defaulListModel = new DefaultListModel();
                        defaulListModel.clear();
                        searchsonglist.setModel(defaulListModel);
                        searchsongtf.setText("");
                    }
                } catch(IOException | ClassNotFoundException | HeadlessException e ){}
            }
        }).start();
    }
    }//GEN-LAST:event_searchsongbtActionPerformed

    private void okcreatebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okcreatebuttonActionPerformed
        // TODO add your handling code here:
        String groupname=groupnamedefiner.getText();
        if(groupname.equals("")){
              JOptionPane.showMessageDialog(null, "ENTER GROUP NAME");
        }
        else{
            new Thread(new Runnable() {

                @Override
                public void run() {
                CreateGroupRequest createGroupRequest =new CreateGroupRequest(groupname,MainClass.user.getUserName());
        try {
            MainClass.oos.writeObject(createGroupRequest);
            MainClass.oos.flush();
            
            Response response =(Response) MainClass.ois.readObject();
            
            if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                
                DefaultListModel defaultListModel = (DefaultListModel) grouplists.getModel();
                defaultListModel.addElement(groupnamedefiner.getText());
                grouplists.setModel(defaultListModel);
                groupnamedefiner.setText("");
                JOptionPane.showMessageDialog(null, "NEW GROUP CREATED");
            }
            
            else if(response.getResponseCode().equals(ResponseCode.ALREADY_EXISTS)){
                JOptionPane.showMessageDialog(null, "GROUP ALREADY EXISTS");
                groupnamedefiner.setText("");
            }
            else if(response.getResponseCode().equals(ResponseCode.FAILURE)){
                JOptionPane.showMessageDialog(null, "ERROR FOUND");
                groupnamedefiner.setText("");
            }
            }  catch (IOException ex) {
            Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
        }
            }
        }).start();
        }
    }//GEN-LAST:event_okcreatebuttonActionPerformed

    private void memberofgroupbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberofgroupbuttonActionPerformed
        // TODO add your handling code here:
        String grpname =grouplists.getSelectedValue();
        GetGroupMembersRequest getGroupMembersRequest =new GetGroupMembersRequest(grpname);
        try {
            MainClass.oos.writeObject(getGroupMembersRequest);
            MainClass.oos.flush();
            
            Response response =(Response) MainClass.ois.readObject();
            if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                DefaultListModel defaultListModel= new DefaultListModel();
                defaultListModel.clear();
                memberlistvisible.setModel(defaultListModel);
                ArrayList<String> members =(ArrayList<String>) response.getResponseObject();
                for (int i=0;i<members.size();i++){
                    defaultListModel.add(i,members.get(i));
                    
                }
                memberlistvisible.setModel(defaultListModel);
                //grouplists.clearSelection();
            }
            
        } catch (IOException ex) {
            Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(mainpage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_memberofgroupbuttonActionPerformed

    private void searchsongtoaddbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchsongtoaddbuttonActionPerformed
        // TODO add your handling code here:
        if(altercardaddsongname.getText().equals("")){
            JOptionPane.showMessageDialog(null,"ENTER ANY SONG NAME TO ADD...");
        }
        else{
            new Thread(new Runnable() {

            @Override
            public void run() {
                SearchSongRequest searchSongRequest = new SearchSongRequest("--SELECT--", "--SELECT--", "--SELECT--", altercardaddsongname.getText());
                try{
                    MainClass.oos.writeObject(searchSongRequest);
                    MainClass.oos.flush();
                    
                    Response response = (Response) MainClass.ois.readObject();
                    
                    if(response.getResponseCode().equals(ResponseCode.SUCCESSFUL)){
                        ArrayList<String> songs = new ArrayList<>();
                        songs = (ArrayList<String>) response.getResponseObject();
                        DefaultListModel defaulListModel = new DefaultListModel();
                        defaulListModel.clear();
                        searchcongstoadd.setModel(defaulListModel);
                        
                        for(int i=0; i<songs.size();i++){
                          defaulListModel.add(i, songs.get(i));
                        }
                        searchcongstoadd.setModel(defaulListModel);
                        altercardaddsongname.setText("");
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "NO SONGS FOUND");
                        DefaultListModel defaulListModel = new DefaultListModel();
                        defaulListModel.clear();
                        searchcongstoadd.setModel(defaulListModel);
                        altercardaddsongname.setText("");
                    }
                } catch(IOException | ClassNotFoundException | HeadlessException e ){}
            }
        }).start();
            
        }
    }//GEN-LAST:event_searchsongtoaddbuttonActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        homecard.setVisible(false);
        mp3card.setVisible(false);
        searchcard.setVisible(false);
        nowcard.setVisible(false);
        playlistcard.setVisible(false);
        groupscard.setVisible(true);
        historycard.setVisible(false);
        profilecard.setVisible(false);
        altercard.setVisible(false);
        creategroupplaylistcard.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed
    
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainpage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainpage().setVisible(true);
            }
        });
    }
public JList getQueueList(){
    return this.queuelist;
}

public JList getQueueUp(){
    return this.queueup;
}
public JList getQueueDown(){
    return this.queuedown;
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addmembername;
    private javax.swing.JButton addmembertogroupbutton;
    private javax.swing.JButton addplaylisttoqueue;
    private javax.swing.JButton addsongbutton;
    private javax.swing.JButton addsongsearch;
    private javax.swing.JButton addsongtoplaylist;
    private javax.swing.JList<String> allplaylistlist;
    private javax.swing.JButton alterb;
    private javax.swing.JButton alterbackb;
    private javax.swing.JPanel altercard;
    private javax.swing.JButton altercardaddsongbutton;
    private javax.swing.JTextField altercardaddsongname;
    private javax.swing.JTextField altercardgroupname;
    private javax.swing.JList<String> altercardplaylistlist;
    private javax.swing.JTextField altercardplaylistname;
    private javax.swing.JPanel centerpanel;
    private javax.swing.JPanel creategroupplaylistcard;
    private javax.swing.JButton createnewgroupplaylistbutton;
    private javax.swing.JButton deletefromqueue;
    private javax.swing.JTextField deletesong;
    private javax.swing.JLabel displayupdated;
    private javax.swing.JButton downlaodsong;
    private javax.swing.JTextField emailchangerfield;
    private javax.swing.JTextField emailfield;
    private javax.swing.JComboBox<String> filterartist;
    private javax.swing.JButton filterback;
    private javax.swing.JButton filterbutton;
    private javax.swing.JComboBox<String> filtergenre;
    private javax.swing.JComboBox<String> filterlanguage;
    private javax.swing.JTextField filtername;
    private javax.swing.JList<String> grouplists;
    private javax.swing.JTextField groupnamedefiner;
    private javax.swing.JTextField groupnameforcreatinggroupplaylist;
    private javax.swing.JButton groupplaylistbutton;
    private javax.swing.JList<String> groupplaylistlists;
    private javax.swing.JPanel groupsb;
    private javax.swing.JPanel groupscard;
    private javax.swing.JPanel headingbar;
    private javax.swing.JPanel historyb;
    private javax.swing.JButton historybutton;
    private javax.swing.JPanel historycard;
    private javax.swing.JList<String> historymenu;
    private javax.swing.JPanel homeb;
    private javax.swing.JPanel homecard;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JButton logoutb;
    private javax.swing.JPanel mainpanel;
    private javax.swing.JList<String> memberlistvisible;
    private javax.swing.JButton memberofgroupbutton;
    private javax.swing.JButton mostplayedbutton;
    private javax.swing.JPanel mp3b;
    private javax.swing.JPanel mp3card;
    private javax.swing.JTextField namechangerfield;
    private javax.swing.JTextField namefield;
    private javax.swing.JButton newsongbutton;
    private javax.swing.JPanel nowb;
    private javax.swing.JPanel nowcard;
    private javax.swing.JButton okbutton;
    private javax.swing.JButton okcreatebutton;
    private javax.swing.JButton playallbutton;
    private javax.swing.JPanel playdownlaodsb;
    private javax.swing.JLabel playdownloadb;
    private javax.swing.JList<String> playlistallsongs;
    private javax.swing.JPanel playlistb;
    private javax.swing.JPanel playlistcard;
    private javax.swing.JTextField playlistnameforcreategroupplaylist;
    private javax.swing.JTextField playlisttextfield;
    private javax.swing.JPanel profileb;
    private javax.swing.JPanel profilecard;
    private javax.swing.JList<String> queuedown;
    private javax.swing.JList<String> queuelist;
    private javax.swing.JList<String> queueup;
    private javax.swing.JButton recentbutton;
    private javax.swing.JButton recommendedbutton;
    private javax.swing.JButton refreshbuttonforcreatinggroupplaylist;
    private javax.swing.JList<String> resultmenu;
    private javax.swing.JPanel searchb;
    private javax.swing.JPanel searchcard;
    private javax.swing.JList<String> searchcongstoadd;
    private javax.swing.JButton searchsongbt;
    private javax.swing.JList<String> searchsonglist;
    private javax.swing.JTextField searchsongtf;
    private javax.swing.JButton searchsongtoaddbutton;
    private javax.swing.JButton sharewithuser;
    private javax.swing.JList<String> songlistmenu;
    private javax.swing.JTextField targetuserfield;
    private javax.swing.JButton trendingbutton;
    private javax.swing.JButton updatebutton;
    private javax.swing.JButton updatelistbutton;
    private javax.swing.JTextField usernamefield;
    private javax.swing.JButton viewsongsofplaylist;
    // End of variables declaration//GEN-END:variables


}

